service: go-cognito-lambda

frameworkVersion: '>=2.0.0 <3.0.0'

plugins:
  - serverless-prune-plugin

provider:
  name: aws
  runtime: go1.x
  stage: ${env:DEPLOY_STAGE}
  region: ${env:REGION}
  profile: ${self:custom.profiles.${self:provider.stage}}
  logRetentionInDays: 3
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"
    - Effect: Allow
      Action:
        - cognito-identity:*
        - cognito-idp:*
        - cognito-sync:*
      Resource:
        - "arn:aws:cognito-idp:*"
  environment:
    DEPLOY_STAGE: ${env:DEPLOY_STAGE}
    TARGET_USER_POOL_ID: ${env:TARGET_USER_POOL_ID}
    REGION: ${env:REGION}
  httpApi:
    cors: true
    authorizers:
      adminJwtAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${env:REGION}.amazonaws.com/${env:TARGET_USER_POOL_ID}
        audience:
          - ${env:NEXT_IDAAS_SERVER_CLIENT_ID}

custom:
  defaultStage: dev
  profiles:
    dev: nekochans-dev
  prune:
    automatic: true
    number: 3

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  customMessage:
    handler: bin/message
    events:
      - cognitoUserPool:
          pool: ${env:TRIGGER_USER_POOL_NAME}
          trigger: CustomMessage
          existing: true
  changePassword:
    handler: bin/changepassword
    events:
      - httpApi:
          method: PATCH
          path: /users/passwords
          authorizer:
            name: adminJwtAuthorizer
            scopes:
              - ${env:DEPLOY_STAGE}-cognito-admin-api.keitakn.de/admin

resources:
  Resources:
    OnCognitoCustomMessageInvokeLambdaPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName:
          Fn::GetAtt: [ "CustomMessageLambdaFunction", "Arn"]
        Principal: "cognito-idp.amazonaws.com"
        SourceArn:
          Fn::Join: [ "", [ "arn:aws:cognito-idp", ":", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":", "userpool/", "${env:TARGET_USER_POOL_ID}" ] ]
